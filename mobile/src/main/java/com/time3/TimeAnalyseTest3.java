/**
 * Copyright (c) 2016 21CN.COM . All rights reserved.<br>
 *
 * Description: TimeNLP<br>
 *
 * Modified log:<br>
 * ------------------------------------------------------<br>
 * Ver.	Date	Author	Description<br>
 * ------------------------------------------------------<br>
 * 1.0	2016年5月4日	kexm	created.<br>
 */
package com.time3;

import java.util.regex.Pattern;

//import org.junit.Test;
import com.time.nlp.TimeNormalizer;
import com.time.nlp.TimeUnit;
import com.time.util.DateUtil;
import com.time.util.Lunar2Solar;
import com.time.util.FeastToSolar;
import com.time.util.LunarSolarConverter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * <p>
 * 测试类
 * <p>
 * @author <a href="mailto:kexm@corp.21cn.com">kexm</a>
 * @version 1.0
 * @since 2016年5月4日
 *
 */
public class TimeAnalyseTest3 {
    private static String[] fest = new String[]{"0101|元旦节", "0108|周恩来逝世纪念日", "0110|中国公安110宣传日", "0121|列宁逝世纪念日", "0126|国际海关日", "0202|世界湿地日", "0204|世界抗癌日", "0207|京汉铁路罢工纪念", "0207|国际声援南非日", "0210|国际气象节", "0214|情人节", "0219|邓小平逝世纪念日", "0221|反对殖民制度斗争日", "0221|国际母语日", "0224|第三世界青年日", "0301|国际海豹日", "0303|全国爱耳日", "0303|世界野生动植物日", "0305|周恩来诞辰纪念日", "0305|“向雷锋同志学习”纪念日", "0305|中国青年志愿者服务日", "0306|世界青光眼日", "0308|妇女节|国际劳动妇女节", "0312|孙中山逝世纪念日", "0312|中国植树节", "0314|马克思逝世纪念日", "0314|白色情人节", "0315|国际消费者权益日", "0316|手拉手情系贫困小伙伴全国统一行动日", "0317|国际航海日", "0317|中国国医节", "0318|全国科技人才活动日", "0321|世界林业节", "0321|消除种族歧视国际日", "0321|世界儿歌日世界诗歌日", "0321|世界睡眠日", "03月22日至4月25日之间|复活节", "0322|世界水日", "0323|世界气象日", "0324|世界防治结核病日", "0330|巴勒斯坦国土日", "0401|愚人节|国际愚人节", "0402|国际儿童图书日", "0402|世界自闭症日", "0405|巴勒斯坦儿童日", "0407|世界卫生日", "0407|世界高血压日", "0410|非洲环境保护日", "0411|世界帕金森日", "0415|非洲自由日", "04月16日至18日：全球青年服务日", "0417|世界血友病日", "0418|国际古迹遗址日", "0421|全国企业家活动日", "0422|列宁诞辰纪念日", "0422|世界地球日", "0422|世界法律日", "0423|世界图书和版权日", "0424|世界青年反对殖民主义日", "0424|亚非新闻工作者日", "0425|全国儿童预防接种宣传日", "0426|世界知识产权日", "0427|联谊城日", "0428|世界安全生产与健康日", "0430|全国交通安全反思日", "0501|(国际)?劳动节", "0503|世界新闻自由日", "0504|青年节|中国青年节", "0504|五四运动纪念日", "0505|马克思诞辰纪念日", "0508|世界红十字日", "0508|世界微笑日", "0511|世界肥胖日", "0512|国际护士节", "0515|全国碘缺乏病防治日", "0515|国际家庭日", "0517|世界电信日", "0518|国际博物馆日", "0520|全国母乳喂养宣传日", "0520|中国学生营养日", "0520|世界计量日", "0522|生物多样性国际日", "0525|非洲解放日", "0526|世界向人体条件挑战日", "0527|上海解放日", "0529|国际维和人员日", "0530|“五卅”反对帝国主义运动纪念日", "0531|世界无烟日", "0601|国际儿童节", "0601|国际牛奶日", "0604|受侵略戕害的无辜儿童国际日", "0605|世界环境日", "0606|全国爱眼日", "0608|世界海洋日", "0611|中国人口日", "0612|世界无童工日", "0614|世界献血日", "0617|世界防止荒漠化和干旱日", "0620|世界难民日", "0622|中国儿童慈善活动日", "0623|国际奥林匹克日", "0623|世界手球日", "0625|全国土地日", "0626|国际禁毒日", "0626|禁止药物滥用和非法贩运国际日", "0626|国际宪章日", "0626|支援酷刑受害者国际日", "0701|中国共产党诞生日", "0701|香港回归纪念日", "0701|亚洲30亿人口日", "0702|国际体育记者日", "0708|世界过敏性疾病日", "0707|中国人民抗日战争纪念日", "0711|世界人口日", "0711|中国航海节", "0726|世界语创立日", "0730|非洲妇女日", "0801|中国人民解放军建军节", "0805|恩格斯逝世纪念日", "0806|国际电影节", "0808|全民健身日", "0812|国际青年日", "0813|国际左撇子日", "0815|日本正式宣布无条件投降日", "0822|邓小平诞辰纪念日", "0823|贩卖黑奴及其废除的国际纪念日", "0826|全国律师咨询日", "0901|全国中小学开学日", "0903|中国抗日战争胜利纪念日", "0908|国际新闻工作者日", "0908|世界扫盲日", "0909|毛泽东逝世纪念日", "0910|中国教师节", "0910|世界预防自杀日", "0914|世界清洁地球日", "0916|国际臭氧层保护日", "0918|“九·一八”事变纪念日", "0920|全国爱牙日", "0921|国际和平日", "0922|世界无车日", "0921|世界老年性痴呆宣传日", "0927|世界旅游日", "1001|国庆节", "1001|国际音乐日", "1001|国际老年人日", "1002|国际和平与民主自由斗争日", "1004|世界动物日", "1005|世界教师日", "1008|全国高血压日", "1009|世界邮政日", "1010|辛亥革命纪念日", "1010|世界精神卫生日", "1011|声援南非政治犯日", "1011|世界镇痛日", "1012|世界60亿人口日", "1013|中国少年先锋队诞辰日", "1013|世界保健日", "1014|世界标准日", "1015|国际盲人节", "1016|世界粮食日", "1017|世界消除贫困日", "1022|世界传统医药日", "1024|联合国日", "1024|世界发展宣传日", "1025|抗美援朝纪念日", "1028|关注男性生殖健康日", "1031|世界勤俭日", "1031|万圣节前夕", "1106|防止战争和武装冲突糟蹋环境国际日", "1107|苏联十月革命纪念日", "1107|世界美发日", "1107|世界美容日", "1108|中国记者节", "1109|中国消防宣传日", "1110|世界青年节", "1112|刘少奇逝世纪念日", "1112|孙中山诞辰纪念日", "1114|世界糖尿病日", "1116|国际容忍日", "1117|国际大学生节", "1120|非洲工业化日", "1120|国际儿童日", "1121|世界电视日", "1121|世界问候日", "1124|刘少奇诞辰纪念日", "1125|消除对妇女的暴力行为国际日", "1125|国际素食日", "1128|恩格斯诞辰纪念日", "1129|声援巴勒斯坦人民国际日", "1201|世界艾滋病日", "1202|废除奴隶制国际日", "1203|国际残疾人日", "1204|全国法制宣传日", "1205|促进经济和社会发展自愿人员国际日", "1205|世界弱能人士日", "1207|国际民航日", "1209|“一二·九”运动纪念日", "1209|世界足球日", "1209|国际反腐败日", "1210|世界人权日", "1211|国际山岳日", "1212|西安事变纪念日", "1213|南京大屠杀纪念日", "1215|世界强化免疫日", "1218|国际移徙者日", "1219|联合国南南合作日", "1220|澳门回归纪念日", "1220|国际人类团结日", "1221|国际篮球日", "1224|平安夜", "1225|圣诞节", "1226|毛泽东诞辰纪念日", "1226|节礼日"};
    private static String[] festc = new String[]{"01010|黑人日", "01021|日本成人节", "04040|世界儿童日", "05026|世界高血压日", "05020|母亲节", "05030|全国助残日", "06030|父亲节", "07016|国际合作节", "09036|全民国防教育日", "09040|国际聋人节", "10011|国际住房日", "10011|国际建筑日", "10024|世界视觉日", "10023|减少自然灾害国际日", "11044|美国感恩节", "12020|国际儿童电视广播日"};
    private static String[] festl = new String[]{"0101|春节", "0115|元宵节?|上元节|灯节", "0202|龙抬头节?", "0505|端午节?", "0707|七夕(情人)?节?", "0715|中元节|鬼节", "0815|中秋节?", "0909|重阳节?", "1208|腊八节?", "1230|除夕日?"};
    
    public static void main(String[] args) {
        test();
    }

    public static void test() {
        //Lunar2Solar l = new Lunar2Solar();
        //System.out.println("20140928："+ l.lunarToSolar(2014, 9, 28, true)[1] + "-" + l.lunarToSolar(2014, 9, 28, true)[2]);
        
        /*System.out.println(arrayToString(new LunarSolarConverter().lunar2solar(2016, 1, 1)));
        
        FeastToSolar f = new FeastToSolar(fest, festl, festc);
        System.out.println( f.getFeast("春节", 2016)[0]+"-"+f.getFeast("春节", 2016)[0] );
        String ff = "青年节";*/
	//System.out.println(ff+"："+ f.getFeast(ff)[0]+"-"+ f.getFeast(ff)[1]);
        //String path = TimeNormalizer.class.getResource("").getPath();

        //String classPath = path.substring(0, path.indexOf("build"));
        //System.out.println(classPath + ": classpath");
        TimeNormalizer normalizer = new TimeNormalizer();
        normalizer.setSolarFeastPattern(fest);
        normalizer.setLunarFeastPattern(festc);
        normalizer.setCalFeastPattern(festl);

        //		normalizer.parse("Hi，all。下周一下午三点开会");// 抽取时间
        TimeUnit[] unit = normalizer.getTimeUnit();
        //		System.out.println("Hi，all。下周一下午三点开会");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("早上六点起床");// 注意此处识别到6天在今天已经过去，自动识别为明早六点（未来倾向，可通过开关关闭：new TimeNormalizer(classPath+"/TimeExp.m", false)）
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("早上六点起床");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("周一开会");// 如果本周已经是周二，识别为下周周一。同理处理各级时间。（未来倾向）
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("周一开会");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("下下周一开会");//对于上/下的识别
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("下下周一开会");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("6:30 起床");// 严格时间格式的识别
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("6:30 起床");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("6-3 春游");// 严格时间格式的识别
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("6-3 春游");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("6月3  春游");// 残缺时间的识别 （打字输入时可便捷用户）
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("6月3  春游");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("明天早上跑步");// 模糊时间范围识别（可在RangeTimeEnum中修改
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("明天早上跑步");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //
        //		normalizer.parse("本周日到下周日出差");// 多时间识别
        //		unit = normalizer.getTimeUnit();
        //		System.out.println("本周日到下周日出差");
        //		System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        //		System.out.println(DateUtil.formatDateDefault(unit[1].getTime()) + "-" + unit[1].getIsAllDayTime());

        String o = "清明下午三点到五点开会";

        System.out.println("待处理：" + o);
        normalizer.parse(o);// 多时间识别，注意第二个时间点用了第一个时间的上文
        unit = normalizer.getTimeUnit();
        System.out.println(DateUtil.formatDateDefault(unit[0].getTime()) + "-" + unit[0].getIsAllDayTime());
        System.out.println(DateUtil.formatDateDefault(unit[1].getTime()) + "-" + unit[1].getIsAllDayTime());
        System.out.println("rests: " + arrayToString(normalizer.getRest()));
        System.out.println("times origin: " + arrayToString(normalizer.getTimesOrigin()));

        /*
         * 输出：
           待处理：圣诞下午三点到五点开会
            2016-09-20 13:57:12 //这行不知道哪里输出来的，不用管，只在终端输出
            2016-12-25 15:00:00-false //第一个时间，非全天
            2016-12-25 17:00:00-false //第二个时间，非全天
            rests: {, 到, 开会} //第一个是空的，是最前面的部分，如果你用“提醒我圣诞”，这个就有值了
            times origin: {圣诞下午3点, 5点} //time的原值，大写被转成小写了，以后再考虑下要不要溯回原值
        */
    }

    public static String arrayToString(String[] arr) {
        StringBuilder sb = new StringBuilder(arr.length * 3); // StringBuilder(arr.length*3)性能比StringBuilder()高
        sb.append("{");
        int offset = arr.length - 1;
        for (int i = 0; i < offset; i++) {
            sb.append(arr[i]).append(", ");
        }
        sb.append(arr[offset]).append("}");

        return sb.toString();
    }
    
    public static String arrayToString(int[] arr) {
        StringBuilder sb = new StringBuilder(arr.length * 3); // StringBuilder(arr.length*3)性能比StringBuilder()高
        sb.append("{");
        int offset = arr.length - 1;
        for (int i = 0; i < offset; i++) {
            sb.append(arr[i]+"").append(", ");
        }
        sb.append(arr[offset]).append("}");

        return sb.toString();
    }

    /**
     * 修改TimeExp.m文件的内容
     */
    public void editTimeExp() {
        String path = TimeNormalizer.class.getResource("").getPath();
        String classPath = path.substring(0, path.indexOf("/com/time"));
        System.out.println(classPath + "/TimeExp.m");
        /**
         * 写TimeExp
         */
        Pattern p = Pattern.compile("((前|昨|今|明|后)(天|日)?(早|晚)(晨|上|间)?)|(\\d+个?[年月日天][以之]?[前后])|(\\d+个?半?(小时|钟头|h|H))|(半个?(小时|钟头))|(\\d+(分钟|min))|([13]刻钟)|((上|这|本|下)+(周|星期)([一二三四五六七天日]|[1-7])?)|((周|星期)([一二三四五六七天日]|[1-7]))|((早|晚)?([0-2]?[0-9](点|时)半)(am|AM|pm|PM)?)|((早|晚)?(\\d+[:：]\\d+([:：]\\d+)*)\\s*(am|AM|pm|PM)?)|((早|晚)?([0-2]?[0-9](点|时)[13一三]刻)(am|AM|pm|PM)?)|((早|晚)?(\\d+[时点](\\d+)?分?(\\d+秒?)?)\\s*(am|AM|pm|PM)?)|(大+(前|后)天)|(([零一二三四五六七八九十百千万]+|\\d+)世)|([0-9]?[0-9]?[0-9]{2}\\.((10)|(11)|(12)|([1-9]))\\.((?<!\\\\d))([0-3][0-9]|[1-9]))|(现在)|(届时)|(这个月)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)日)|(晚些时候)|(今年)|(长期)|(以前)|(过去)|(时期)|(时代)|(当时)|(近来)|(([零一二三四五六七八九十百千万]+|\\d+)夜)|(当前)|(日(数|多|多少|好几|几|差不多|近|前|后|上|左右))|((\\d+)点)|(今年([零一二三四五六七八九十百千万]+|\\d+))|(\\d+[:：]\\d+(分|))|((\\d+):(\\d+))|(\\d+/\\d+/\\d+)|(未来)|((充满美丽、希望、挑战的)?未来)|(最近)|(早上)|(早(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(日前)|(新世纪)|(小时)|(([0-3][0-9]|[1-9])(日|号))|(明天)|(([0-3][0-9]|[1-9])[日号])|((数|多|多少|好几|几|差不多|近|前|后|上|左右)周)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)年)|([一二三四五六七八九十百千万几多]+[天日周月年][后前左右]*)|(每[年月日天小时分秒钟]+)|((\\d+分)+(\\d+秒)?)|([一二三四五六七八九十]+来?[岁年])|([新?|\\d*]世纪末?)|((\\d+)时)|(世纪)|(([零一二三四五六七八九十百千万]+|\\d+)岁)|(今年)|([星期周]+[一二三四五六七])|(星期([零一二三四五六七八九十百千万]+|\\d+))|(([零一二三四五六七八九十百千万]+|\\d+)年)|([本后昨当新后明今去前那这][一二三四五六七八九十]?[年月日天])|(早|早晨|早上|上午|中午|午后|下午|晚上|晚间|夜里|夜|凌晨|深夜)|(回归前后)|((\\d+点)+(\\d+分)?(\\d+秒)?左右?)|((\\d+)年代)|(本月(\\d+))|(第(\\d+)天)|((\\d+)岁)|((\\d+)年(\\d+)月)|([去今明]?[年月](底|末))|(([零一二三四五六七八九十百千万]+|\\d+)世纪)|(昨天(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(年度)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)星期)|(年底)|([下个本]+赛季)|(\\d+)月(\\d+)|(今年(\\d+)月(\\d+)日)|((\\d+)月(\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午(\\d+)时)|(今年晚些时候)|(两个星期)|(过去(数|多|多少|好几|几|差不多|近|前|后|上|左右)周)|(本赛季)|(半个(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(稍晚)|((\\d+)号晚(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(今(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+)年)|(这个时候)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)个小时)|(最(数|多|多少|好几|几|差不多|近|前|后|上|左右)(数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(凌晨)|((\\d+)年(\\d+)月(\\d+)日)|((\\d+)个月)|(今天早(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(第[一二三四五六七八九十\\d+]+季)|(当地时间)|(今(数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)年)|(早晨)|(一段时间)|([本上]周[一二三四五六七])|(凌晨(\\d+)点)|(去年(\\d+)月(\\d+)日)|(年关)|(如今)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)小时)|(当晚)|((\\d+)日晚(\\d+)时)|(([零一二三四五六七八九十百千万]+|\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(每年(\\d+)月(\\d+)日)|(([零一二三四五六七八九十百千万]+|\\d+)周)|((\\d+)月)|(农历)|(两个小时)|(本周([零一二三四五六七八九十百千万]+|\\d+))|(长久)|(清晨)|((\\d+)号晚)|(春节)|(星期日)|(圣诞)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)段)|(现年)|(当日)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)分钟)|(\\d+(天|日|周|月|年)(后|前|))|((文艺复兴|巴洛克|前苏联|前一|暴力和专制|成年时期|古罗马|我们所处的敏感)+时期)|((\\d+)[年月天])|(清早)|(两年)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(昨天(数|多|多少|好几|几|差不多|近|前|后|上|左右)午(\\d+)时)|(([零一二三四五六七八九十百千万]+|\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(今(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+))|(圣诞节)|(学期)|(\\d+来?分钟)|(过去(数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(星期天)|(夜间)|((\\d+)日凌晨)|(([零一二三四五六七八九十百千万]+|\\d+)月底)|(当天)|((\\d+)日)|(((10)|(11)|(12)|([1-9]))月)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)(数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(今年(\\d+)月份)|(晚(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+)时)|(连[年月日夜])|((\\d+)年(\\d+)月(\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|((一|二|两|三|四|五|六|七|八|九|十|百|千|万|几|多|上|\\d+)+个?(天|日|周|月|年)(后|前|半|))|((胜利的)日子)|(青春期)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(早(数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)点(数|多|多少|好几|几|差不多|近|前|后|上|左右))|([0-9]{4}年)|(周末)|(([零一二三四五六七八九十百千万]+|\\d+)个(数|多|多少|好几|几|差不多|近|前|后|上|左右)小时)|(([(小学)|初中?|高中?|大学?|研][一二三四五六七八九十]?(\\d+)?)?[上下]半?学期)|(([零一二三四五六七八九十百千万]+|\\d+)时期)|(午间)|(次年)|(这时候)|(农历新年)|([春夏秋冬](天|季))|((\\d+)天)|(元宵节)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)分)|((\\d+)月(\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(晚(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+)时(\\d+)分)|(傍晚)|(周([零一二三四五六七八九十百千万]+|\\d+))|((数|多|多少|好几|几|差不多|近|前|后|上|左右)午(\\d+)时(\\d+)分)|(同日)|((\\d+)年(\\d+)月底)|((\\d+)分钟)|((\\d+)世纪)|(冬季)|(国庆)|(年代)|(([零一二三四五六七八九十百千万]+|\\d+)年半)|(今年年底)|(新年)|(本周)|(当地时间星期([零一二三四五六七八九十百千万]+|\\d+))|(([零一二三四五六七八九十百千万]+|\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)岁)|(半小时)|(每周)|(([零一二三四五六七八九十百千万]+|\\d+)周年)|((重要|最后)?时刻)|(([零一二三四五六七八九十百千万]+|\\d+)期间)|(周日)|(晚(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(今后)|(([零一二三四五六七八九十百千万]+|\\d+)段时间)|(明年)|([12][09][0-9]{2}(年度?))|(([零一二三四五六七八九十百千万]+|\\d+)生)|(今天凌晨)|(过去(\\d+)年)|(元月)|((\\d+)月(\\d+)日凌晨)|([前去今明后新]+年)|((\\d+)月(\\d+))|(夏天)|((\\d+)日凌晨(\\d+)时许)|((\\d+)月(\\d+)日)|((\\d+)点半)|(去年底)|(最后一[天刻])|(最(数|多|多少|好几|几|差不多|近|前|后|上|左右)(数|多|多少|好几|几|差不多|近|前|后|上|左右)个月)|(圣诞节?)|(下?个?(星期|周)(一|二|三|四|五|六|七|天))|((\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)年)|(当天(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(每年的(\\d+)月(\\d+)日)|((\\d+)日晚(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(星期([零一二三四五六七八九十百千万]+|\\d+)晚)|(深夜)|(现如今)|([上中下]+午)|(第(一|二|三|四|五|六|七|八|九|十|百|千|万|几|多|\\d+)+个?(天|日|周|月|年))|(昨晚)|(近年)|(今天清晨)|(中旬)|(星期([零一二三四五六七八九十百千万]+|\\d+)早)|(([零一二三四五六七八九十百千万]+|\\d+)战期间)|(星期)|(昨天晚(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(较早时)|(个(数|多|多少|好几|几|差不多|近|前|后|上|左右)小时)|((民主高中|我们所处的|复仇主义和其它危害人类的灾难性疾病盛行的|快速承包电影主权的|恢复自我美德|人类审美力基础设施|饱受暴力、野蛮、流血、仇恨、嫉妒的|童年|艰苦的童年)+时代)|(元旦)|(([零一二三四五六七八九十百千万]+|\\d+)个礼拜)|(昨日)|([年月]初)|((\\d+)年的(\\d+)月)|(每年)|(([零一二三四五六七八九十百千万]+|\\d+)月份)|(今年(\\d+)月(\\d+)号)|(今年([零一二三四五六七八九十百千万]+|\\d+)月)|((\\d+)月底)|(未来(\\d+)年)|(第([零一二三四五六七八九十百千万]+|\\d+)季)|(\\d?多年)|(([零一二三四五六七八九十百千万]+|\\d+)个星期)|((\\d+)年([零一二三四五六七八九十百千万]+|\\d+)月)|([下上中]午)|(早(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+)点)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)月)|(([零一二三四五六七八九十百千万]+|\\d+)个(数|多|多少|好几|几|差不多|近|前|后|上|左右)月)|(同([零一二三四五六七八九十百千万]+|\\d+)天)|((\\d+)号凌晨)|(夜里)|(两个(数|多|多少|好几|几|差不多|近|前|后|上|左右)小时)|(昨天)|(罗马时代)|(目(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(([零一二三四五六七八九十百千万]+|\\d+)月)|((\\d+)年(\\d+)月(\\d+)号)|(((10)|(11)|(12)|([1-9]))月份?)|([12][0-9]世纪)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)天)|(工作日)|(稍后)|((\\d+)号(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(未来([零一二三四五六七八九十百千万]+|\\d+)年)|([0-9]+[天日周月年][后前左右]*)|(([零一二三四五六七八九十百千万]+|\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(最(数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)刻)|(很久)|((\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)岁)|(去年(\\d+)月(\\d+)号)|(两个月)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)午(\\d+)时)|(古代)|(两天)|(\\d+个?(小时|星期))|((\\d+)年半)|(较早)|(([零一二三四五六七八九十百千万]+|\\d+)个小时)|([一二三四五六七八九十]+周年)|(星期([零一二三四五六七八九十百千万]+|\\d+)(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(时刻)|((\\d+天)+(\\d+点)?(\\d+分)?(\\d+秒)?)|((\\d+)日([零一二三四五六七八九十百千万]+|\\d+)时)|((\\d+)周年)|(([零一二三四五六七八九十百千万]+|\\d+)早)|(([零一二三四五六七八九十百千万]+|\\d+)日)|(去年(\\d+)月)|(过去([零一二三四五六七八九十百千万]+|\\d+)年)|((\\d+)个星期)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)(数|多|多少|好几|几|差不多|近|前|后|上|左右)天)|(执政期间)|([当前昨今明后春夏秋冬]+天)|(去年(\\d+)月份)|(今(数|多|多少|好几|几|差不多|近|前|后|上|左右))|((\\d+)周)|(两星期)|(([零一二三四五六七八九十百千万]+|\\d+)年代)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)天)|(昔日)|(两个半月)|([印尼|北京|美国]?当地时间)|(连日)|(本月(\\d+)日)|(第([零一二三四五六七八九十百千万]+|\\d+)天)|((\\d+)点(\\d+)分)|([长近多]年)|((\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午(\\d+)时)|(那时)|(冷战时代)|(([零一二三四五六七八九十百千万]+|\\d+)天)|(这个星期)|(去年)|(昨天傍晚)|(近期)|(星期([零一二三四五六七八九十百千万]+|\\d+)早些时候)|((\\d+)([零一二三四五六七八九十百千万]+|\\d+)年)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)两个月)|((\\d+)个小时)|(([零一二三四五六七八九十百千万]+|\\d+)个月)|(当年)|(本月)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)([零一二三四五六七八九十百千万]+|\\d+)个月)|((\\d+)点(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(目前)|(去年([零一二三四五六七八九十百千万]+|\\d+)月)|((\\d+)时(\\d+)分)|(每月)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)段时间)|((\\d+)日晚)|(早(数|多|多少|好几|几|差不多|近|前|后|上|左右)(\\d+)点(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(下旬)|((\\d+)月份)|(逐年)|(稍(数|多|多少|好几|几|差不多|近|前|后|上|左右))|((\\d+)年)|(月底)|(这个月)|((\\d+)年(\\d+)个月)|(\\d+大寿)|(周([零一二三四五六七八九十百千万]+|\\d+)早(数|多|多少|好几|几|差不多|近|前|后|上|左右))|(半年)|(今日)|(末日)|(昨天深夜)|(今年(\\d+)月)|((\\d+)月(\\d+)号)|((\\d+)日夜)|((早些|某个|晚间|本星期早些|前些)+时候)|(同年)|((北京|那个|更长的|最终冲突的)时间)|(每个月)|(一早)|((\\d+)来?[岁年])|((数|多|多少|好几|几|差不多|近|前|后|上|左右)个月)|([鼠牛虎兔龙蛇马羊猴鸡狗猪]年)|(季度)|(早些时候)|(今天)|(每天)|(年半)|(下(个)?月)|(午后)|((\\d+)日(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|((数|多|多少|好几|几|差不多|近|前|后|上|左右)个星期)|(今天(数|多|多少|好几|几|差不多|近|前|后|上|左右)午)|(同[一二三四五六七八九十][年|月|天])|(T\\d+:\\d+:\\d+)|(\\d+/\\d+/\\d+:\\d+:\\d+.\\d+)|(\\?\\?\\?\\?-\\?\\?-\\?\\?T\\d+:\\d+:\\d+)|(\\d+-\\d+-\\d+T\\d+:\\d+:\\d+)|(\\d+/\\d+/\\d+ \\d+:\\d+:\\d+.\\d+)|(\\d+-\\d+-\\d+|[0-9]{8})|(((\\d+)年)?((10)|(11)|(12)|([1-9]))月(\\d+))|((\\d[\\.\\-])?((10)|(11)|(12)|([1-9]))[\\.\\-](\\d+))");
        try {
            TimeNormalizer.writeModel(p, classPath + "/TimeExp.m");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
}


